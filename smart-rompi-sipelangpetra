#include <Arduino.h>
#include <NewPing.h>
#include <SoftwareSerial.h>
#include <DFRobotDFPlayerMini.h>

#define MAX_DISTANCE 400

const int trigPin2 = 4;
const int echoPin2 = 5;

int minCenterDistance = 100;

static unsigned long timer = millis();

int waitTime = 3500;

NewPing sonarCenter(trigPin2, echoPin2 ,MAX_DISTANCE);

SoftwareSerial mp3SoftwareSerial(8, 9); // RX, TX
DFRobotDFPlayerMini DFPlayer;

void printDetail(uint8_t type, int value){
  switch (type) {
    case TimeOut:
      Serial.println(F("Waktu habis!"));
      break;
    case WrongStack:
      Serial.println(F("Stack salah!"));
      break;
    case DFPlayerCardInserted:
      Serial.println(F("Kartu memori berhasil dimasukkan!"));
      break;
    case DFPlayerCardRemoved:
      Serial.println(F("Kartu memori dicabut!"));
      break;
    case DFPlayerCardOnline:
      Serial.println(F("Membaca kartu memori!"));
      break;
    case DFPlayerPlayFinished:
      Serial.print(F("Nomor:"));
      Serial.print(value);
      Serial.println(F(" Pemutaran selesai!"));
      break;
    case DFPlayerError:
      Serial.print(F("DFPlayerError:"));
      switch (value) {
        case Busy:
          Serial.println(F("Kartu memori tidak terdeteksi"));
          break;
        case Sleeping:
          Serial.println(F("Sleep"));
          break;
        case SerialWrongStack:
          Serial.println(F("Get Wrong Stack"));
          break;
        case CheckSumNotMatch:
          Serial.println(F("Check Sum Not Match"));
          break;
        case FileIndexOut:
          Serial.println(F("File Index Out of Bound"));
          break;
        case FileMismatch:
          Serial.println(F("Tidak dapat menemukan File"));
          break;
        case Advertise:
          Serial.println(F("Menunggu"));
          break;
        default:
          break;
      }
      break;
    default:
      break;
  }
}

void leftAlert(int distance) {
  
  if (millis() - timer > waitTime) {
    timer = millis();
    DFPlayer.playLargeFolder(01, distance+1);
  } 
  if (DFPlayer.available()) {
    printDetail(DFPlayer.readType(), DFPlayer.read()); //Print pesan detail dari DFPlayer
  }
}

void centerAlert(int distance) {

  if (millis() - timer > waitTime) {
    timer = millis();
    DFPlayer.playLargeFolder(02, distance+1);
  } 
  if (DFPlayer.available()) {
    printDetail(DFPlayer.readType(), DFPlayer.read()); //Print pesan detail dari DFPlayer
  }
}

void rightAlert(int distance) {
  
  if (millis() - timer > waitTime) {
    timer = millis();
    DFPlayer.playLargeFolder(03, distance+1);
  } 
  if (DFPlayer.available()) {
    printDetail(DFPlayer.readType(), DFPlayer.read()); //Print pesan detail dari DFPlayer
  }
}

void setupDFPlayer() {

  mp3SoftwareSerial.begin(9600);
  Serial.println();
  Serial.println(F("Smart Rompi..."));
  Serial.println(F("Inisialisasi DFPlayer ... (Membutuhkan waktu 3~5 detik)"));
  
  if (!DFPlayer.begin(mp3SoftwareSerial)){
    Serial.println(F("Tidak bisa memulai:"));
    Serial.println(F("1.Mohon cek koneksi!"));
    Serial.println(F("2.Masukkan kartu memori!"));
    while(true);
  }
  Serial.println(F("DFPlayer Mini online."));
  
  DFPlayer.setTimeOut(500); //Set komunikasi serial time out 500ms
  DFPlayer.volume(20);  //Set volume (0~30)
  DFPlayer.EQ(DFPLAYER_EQ_NORMAL);
  DFPlayer.outputDevice(DFPLAYER_DEVICE_SD);
}

void setup() {
  Serial.begin(9600);
  setupDFPlayer();
}

void loop() {
  delay(29);
  int centerDistance  = sonarCenter.ping_cm();

  if(centerDistance < minCenterDistance && centerDistance > 1) {

    Serial.print("Objek ");
    Serial.print(centerDistance);
    Serial.println(" CM didepan");

    centerAlert(centerDistance);
  }

}
